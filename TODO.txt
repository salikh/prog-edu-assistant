# Pilot - deadline 8/8

> syntactic tests for dataframe 2
> %%inlinetest for FP_OOP
> fix 'x' in globals() in %%inlinetest when run for %%submission.
  ? suggest using locals() instead and couple that with inline execution of a
  submission together with the inline test?

Done

* redirect to login screen on upload form auth failure
* on manual upload, provide the report link
* add stylesheet for reports
  * add static files serving
* detect more errors in %%inlinetest
  * detect and report nsjail time out in %%inlinetest
  * SyntaxError: unexpected character after line continuation character\n[I][
* include source code in the automatic reports by %%inlinetest
* use Origin value in CORS responses
* drop outputs when uploading the notebook
* hash and salt user id
* store student hash into notebook metadata and report
* save the context separately from the inlinetest
* wrap inline test in try: ... except AssertionError as e: ...
* %%inlinetest, %%studenttest magics
* make %%solution cell to display the output
* save the default solution cell contents to check for trivial untouched submissions
* support %%inlinetest in autotest()
* produce an outcome vector in %%inlinetest
* generate a template for inline tests automatically
* support a report for %%inlinetest
* generate a template file for %%inlinetest in autograder dir
* working %inlinetest
* all dataframe exercises finalized
* deploy to cloud

# Next

# Later

> Run the inline tests with nbconvert to have highest possible fidelity
  > allow %writefile? -- maybe not a good idea on a r/o filesystem.


# Demo 1 - deadline 5/14

* Authentication for the uploader tool
> Annotate OOP assignment in master notebook format [#next]
> End-to-end autograder demo script for OOP assignment
* Deployment via Docker Compose

## Demo 1 decisions

- Storage for submissions and reports.
  * Message queue
- Storage for autograder scripts.
  * Autograder docker image.
- Work manager for workers to poll for submissions and post reports
  * RabbitMQ (the only way for workers to communicate with outside world).
- General architecture
  * Use Golang and python
  * Use Bazel for build
  * Docker compose deployment

## PostDemo 1

* Create PIP library for notebook magics
* Define bazel rule for notebooks
* Build worker and server with Bazel
0 Build docker images with Bazel
0 Figure out how to test master solution against syntactic tests.
* Package IPython magics into a pip package
* Docker image for autograder worker [#later]
> Extract master solution to autograder directory too
  > Run the autograder scripts as test for master solution
> Extract the student tests as unit tests for master solution
> Extract autograder tests (autotests) as unit tests
x Map the overlay scratch directory [#next]
* Docker image for running RabbitMQ (transient) [#later]
* Docker image for server [#later]
* Use Bazel to extract Autograder directories [#later]
> Test cell output [#later]
- Use Protobuffers and GRPC [#later]

## Notes

Run the RabbitMQ daemon with Docker [#later]:

    docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3

[*] https://hub.docker.com/_/rabbitmq

## Progress

2019-02-20 Demo 0 - complete
2019-04 Investigation of the prior art
  * Look up how ok autograder invokes grading
    * proprietary image, source code not available.
  * Look at jassign: create assignment tests + notebooks from a single notebook
    * Ideas are good, but the code is young and not very capable. The
      requirements are different: no tests for autograder.
2019-04-20
* Submit helloworld-en.ipynb with annotation examples
  * Document master notebook format
* Create an extractor binary (golang or python)
  * Factor into small functions and add tests
  * Create a Bazel BUILD for extracting student notebooks.
* Extract autograder directories
  * Extract autograder scripts
* Autograder worker
  * Listen to RabbitMQ
  * Extract the solution code from notebook
  * Run autograder scripts under nsjail
  * Extract the test results from the output
  x Run the report generator [#next]
  * Post the report to RabbitMQ

2019-05-02 working out master notebook format details
2019-05-07 19:46 Master notebook format (2h21)
2019-05-07 22:07 Update the assign tool.
2019-05-08 09:57 Generate report in the autograder worker.
2019-05-08 04:00 Template and report magics. Do we need magics there at all?
2019-05-08 11:50 Report handler in the server.
2019-05-08 11:51 Demo 1: drafted.
2019-05-12 00:07 Work on docker images/compose.
2019-05-12 22:45 converted magics and snippets into a pip library.
